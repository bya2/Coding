export default class RegExp {
  url = /https?:\/{2}[\w./]+/;
  ipv4 = /(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))\.){3}((1[0-9]{2})|(2[0-4]\d)|(25[0-5])|(\d{1,2}))/;

  numbersInSquareBracket = /{[\d,]+}/g; // {{1-9,1-9}}

  inB = /(\d+,)*\d+/g;
}

// NOT: ^

// 메타문자
// https://blog.hexabrain.net/200?category=472743

// 수량자
// https://blog.hexabrain.net/202?category=472743

// 문자가 하나 이상 있으면 일치: +
// 문자가 없거나, 하나 이상 있으면 일치: *
// 문자가 없거나, 하나만 있으면 일치: ?

// <b> 뒤에 연속된 문자들이 등장하다 처음으로 </b> 태그를 만날때까지 일치: /<b>.*?</b>/

//  \1은 첫번째 버퍼에 저장된 하위 표현식을 참조하겠다는 말
// ()은 하위 표현식 -> 하위 표현식은 임시 버퍼에 저장 -> \n(1~99)을 통해 각 버퍼에 접근 가능

// 전방탐색기호: ?= -> = 다음에 오는 문자가 일치하는 영역에서 제외 ()와 같이 쓰여야함. ex(?=:)
// 후방탐색기호: ?<=

// 부정형전방탐색기호: ?!
// 부정형후방탐색기호: ?<!
